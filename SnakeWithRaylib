#include <iostream>
#include <raylib.h>
#include <deque>
#include <raymath.h>

using namespace std;

Color green = {173, 204, 96, 255};
Color darkgreen = {43, 51, 24, 255};

int kichThuocO = 25; //cellsize
int SoOtrongMoiHangCot = 20; //cellcount
int offset = 62.5;


double lastUpdateTime = 0;

bool ElementInDeque(Vector2 element, deque<Vector2> deque)
{
    for(unsigned int i = 0; i < deque.size(); i++)
    {
        if(Vector2Equals(deque[i], element))
        {
            return true;
        }
    }
    return false;
}

bool eventTriggered(double interval)
{
    double currentTime = GetTime();
    if(currentTime - lastUpdateTime >= interval)
    {
        lastUpdateTime = currentTime;
        return true;
    }
    return false;
}

class Snake
{
public:
    deque<Vector2> body = {Vector2{6,9}, Vector2{5,9}, Vector2{4,9}};
    Vector2 direction = {1, 0};
    bool addSegment = false;

    void Draw()
    {
        for(unsigned int i = 0; i < body.size(); i++)
        {
            float x = body[i].x;
            float y = body[i].y;
            Rectangle segment = Rectangle{offset + x * kichThuocO, offset + y * kichThuocO, (float)kichThuocO, (float)kichThuocO};
            DrawRectangleRounded(segment, 0.5, 6, darkgreen);
        }
    }

    void Update()
    {
        body.push_front(Vector2Add(body[0], direction));
        if(addSegment == true)
        {
            addSegment = false;
        }
        else
        {  
            body.pop_back();
        }

    }

    void Reset()
    {
        body = {Vector2{6, 9}, Vector2{5, 9}, Vector2{4, 9}};
        direction = {1, 0};
    }
};

class Food // Tao do an cho ran
{
public:
    Vector2 position; // vi tri tuong doi cua do an 
    Texture2D texture;

    Food(deque<Vector2> snakeBody)
    {
        Image image = LoadImage("Graphics/Food.png");
        texture = LoadTextureFromImage(image);
        UnloadImage(image);
        position = GenerateRandomPos(snakeBody);
    }

    ~Food()
    {
        UnloadTexture(texture);
    }

    void Draw()
    {
        DrawTexture(texture, offset + position.x * kichThuocO, offset + position.y * kichThuocO, WHITE);
        // ham nay cho ta biet can 4 doi so toa do x,y,rong,cao va mau sac cua vat can ve
    }

    Vector2 GenerateRandomCell()
    {
        float x = GetRandomValue(0, SoOtrongMoiHangCot - 1);
        float y = GetRandomValue(0, SoOtrongMoiHangCot - 1);
        return Vector2{x, y};
    }

    Vector2 GenerateRandomPos(deque<Vector2>snakeBody)
    {
        Vector2 position = GenerateRandomCell();

        while(ElementInDeque(position, snakeBody))
        {
            position = GenerateRandomCell();
        }
        return position;
    }

};

class Game
{
public:
    Snake snake = Snake();
    Food food = Food(snake.body);
    bool running = true;
    int score = 0;
    Sound eatSound;
    Sound wallSound;

    Game()
    {
        InitAudioDevice();
        eatSound = LoadSound("Sound/eat.mp3");
        wallSound = LoadSound("Sound/wall.mp3");
    }

    ~Game()
    {
        UnloadSound(eatSound);
        UnloadSound(wallSound);
        CloseAudioDevice();
    }

    void Draw()
    {
        food.Draw();
        snake.Draw();
    }

    void Update()
    {
        if(running)
        {
            snake.Update();
            CheckCollisionWithFood();
            CheckCollisionWithEdges();
            CheckCollisionWithTail();
        }
    }

    void CheckCollisionWithFood()
    {
        if(Vector2Equals(snake.body[0], food.position))
        {
            food.position = food.GenerateRandomPos(snake.body);
            snake.addSegment = true;
            score++;
            PlaySound(eatSound);
        }
    }

    void CheckCollisionWithEdges()
    {
        if(snake.body[0].x == SoOtrongMoiHangCot || snake.body[0].x == -1)
        {
            GameOver();
        }

        if(snake.body[0].y == SoOtrongMoiHangCot || snake.body[0].y == -1)
        {
            GameOver();
        }
    }

    void GameOver()
    {
        snake.Reset();
        food.position = food.GenerateRandomPos(snake.body);
        running = false;
        score = 0;
        PlaySound(wallSound);
    }

    void CheckCollisionWithTail()
    {
        deque<Vector2> headlessBody = snake.body;
        headlessBody.pop_front();
        if(ElementInDeque(snake.body[0], headlessBody))
        {
            GameOver();
        }
    }
};

int main () 
{
    cout << "Starting the game..." <<endl;
    InitWindow(2 * offset +kichThuocO * SoOtrongMoiHangCot,2 * offset + kichThuocO * SoOtrongMoiHangCot, "Snake Game"); // cần 3 đối số: chiều rộng, chiều cao và tiêu đề - hàm khởi tạo cửa số
    SetTargetFPS(60); // tốc độ khung hình trên giây

    Game game = Game();

    // khoi tao vong lap game
    while(WindowShouldClose() == false) // đây là hàm kiểm tra xem phím escape hay biểu tượng đóng có được nhấn hay không
    {
        BeginDrawing(); //khởi tạo khung trống để vẽ mọi thứ trong game;

        if(eventTriggered(0.2))
        {
            game.Update();
        }

        if(IsKeyPressed(KEY_UP) && game.snake.direction.y != 1)
        {
            game.snake.direction = {0, -1};
            game.running = true;
        }
        
        if(IsKeyPressed(KEY_DOWN) && game.snake.direction.y != -1)
        {
            game.snake.direction = {0, 1};
            game.running = true;
        }

        if(IsKeyPressed(KEY_LEFT) && game.snake.direction.x != 1)
        {
            game.snake.direction = {-1, 0};
            game.running = true;
        }

        if(IsKeyPressed(KEY_RIGHT) && game.snake.direction.x != -1)
        {
            game.snake.direction = {1, 0};
            game.running = true;
        }

        //Ve
        ClearBackground(green); // xoa nen cua so
       
        DrawRectangleLinesEx(Rectangle{(float)offset - 5, (float)offset - 5, (float)SoOtrongMoiHangCot * kichThuocO + 10, (float)SoOtrongMoiHangCot * kichThuocO + 10}, 5, darkgreen);

        DrawText("Snake Game", offset - 5, 20, 40, darkgreen);
        DrawText(TextFormat("%i", game.score), offset - 5, offset + 5 + SoOtrongMoiHangCot * kichThuocO, 40, darkgreen);
        game.Draw();

        EndDrawing();// ngược với begin
    }


    CloseWindow(); // đóng cửa sổ
    return 0;
}
